/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.solai.solai_game_simulator

import ch.qos.logback.classic.Level
import ch.qos.logback.classic.Logger
import org.slf4j.LoggerFactory
import org.solai.solai_game_simulator.character_queue.GameSimulationData
import org.solai.solai_game_simulator.character_queue.SimulationQueue
import org.springframework.boot.SpringApplication
import org.springframework.boot.autoconfigure.SpringBootApplication
import sol_game.CharacterConfigLoader
import java.lang.IllegalStateException
import java.util.*

@SpringBootApplication
class App

fun main(args: Array<String>) {
    val rootLogger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME) as Logger
    rootLogger.level = Level.INFO

    SpringApplication.run(App::class.java, *args)
//    testQueue()
}

fun postExampleCharToQueue() {
    val charQ: SimulationQueue = SimulationQueue.getQueue("localhost") ?: run {
        throw IllegalStateException("Could not connect to simulation queue")
    }

    val charConfig = CharacterConfigLoader.fromResourceFile("{\n  \"name\": \"Frank\",\n  \"radius\": 48,\n  \"moveVelocity\": 48,\n  \"abilities\": [\n    {\n      \"name\": \"rapid shot\",\n      \"type\": \"PROJECTILE\",\n      \"radius\": 10,\n      \"distanceFromChar\": 48,\n      \"speed\": 600,\n      \"activeTime\": 100,\n      \"startupTime\": 1,\n      \"executionTime\": 0,\n      \"endlagTime\": 0,\n      \"rechargeTime\": 10,\n      \"damage\": 20,\n      \"baseKnockback\": 100,\n      \"knockbackRatio\": 1,\n      \"knockbackPoint\": 32,\n      \"knockbackTowardPoint\": false\n    },\n    {\n      \"name\": \"mega shot\",\n      \"type\": \"PROJECTILE\",\n      \"radius\": 64,\n      \"distanceFromChar\": 128,\n      \"speed\": 1000,\n      \"activeTime\": 100,\n      \"startupTime\": 15,\n      \"executionTime\": 1,\n      \"endlagTime\": 5,\n      \"rechargeTime\": 10,\n      \"damage\": 20,\n      \"baseKnockback\": 100,\n      \"knockbackRatio\": 1,\n      \"knockbackPoint\": 32,\n      \"knockbackTowardPoint\": false\n    },\n    {\n      \"name\": \"get off\",\n      \"type\": \"MELEE\",\n      \"radius\": 256,\n      \"distanceFromChar\": 0,\n      \"speed\": 0,\n      \"activeTime\": 1,\n      \"startupTime\": 3,\n      \"executionTime\": 3,\n      \"endlagTime\": 7,\n      \"rechargeTime\": 10,\n      \"damage\": 20,\n      \"baseKnockback\": 100,\n      \"knockbackRatio\": 1,\n      \"knockbackPoint\": 32,\n      \"knockbackTowardPoint\": false\n    }\n  ]\n}\n")

    charQ.pushSimulationData(GameSimulationData(
            UUID.randomUUID().toString(),
            listOf(charConfig, charConfig),
            listOf("gameLength", "nearDeathScenerios")
    ))
}


fun testQueue() {

    val charQ: SimulationQueue = SimulationQueue.getQueue("localhost") ?: run {
        throw IllegalStateException("Could not connect to simulation queue")
    }


    Thread() {
        var i = 0
        while (true) {
            val charQ2:  SimulationQueue = SimulationQueue.getQueue("localhost")!!
            charQ2.pushSimulationData(GameSimulationData(
                    simulationId = "sim1 $i",
                    charactersConfigs = listOf(),
                    metrics = listOf("hei")
            ))
            i++
            Thread.sleep(1000)
        }

    }.start()

    while (true) {
        val simData = charQ.waitSimulationData(3)
        println(simData)
        Thread.sleep(3000)
    }

}